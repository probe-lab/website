frequency: weekly
datasets:
  - name: "current"
    source: "nebula_ipfs"
    query: >
      with u as (
      select s.peer_id,
        extract(epoch from sum(upper(s.uptime * tstzrange({{ .StartOfWeek | timestamptz }}-'1 week'::interval, {{ .StartOfWeek | timestamptz }})) - lower(s.uptime * tstzrange({{ .StartOfWeek | timestamptz }}-'1 week'::interval, {{ .StartOfWeek | timestamptz }})))::interval)/extract(epoch from '1 week'::interval) as uptime
        from sessions s
        where s.uptime && tstzrange({{ .StartOfWeek | timestamptz }}-'1 week'::interval, {{ .StartOfWeek | timestamptz }})
        group by peer_id
      )
      select
        sum(case when uptime >= 0.8 then 1 else 0 end) as online,
        sum(case when uptime >= 0.4 and uptime < 0.8 then 1 else 0 end) as mostlyonline,
        sum(case when uptime >= 0.1 and uptime < 0.4 then 1 else 0 end) as mostlyoffline,
        sum(case when uptime < 0.1 then 1 else 0 end) + (
          with cte as (
            select v.peer_id
            from visits v
            where v.visit_started_at >= {{ .StartOfWeek | timestamptz }} - '2 week'::interval
              and v.visit_started_at < {{ .StartOfWeek | timestamptz }} - '1 week'::interval
              and v.type = 'crawl'
            group by v.peer_id
            having bool_and(v.connect_error IS not null)
          ) select count(distinct peer_id) from cte
        ) as offline
      from u
      
  - name: "previous"
    source: "nebula_ipfs"
    query: >
      with u as (
      select s.peer_id,
        extract(epoch from sum(upper(s.uptime * tstzrange({{ .StartOfWeek | timestamptz }}-'2 week'::interval, {{ .StartOfWeek | timestamptz }}-'1 week'::interval)) - lower(s.uptime * tstzrange({{ .StartOfWeek | timestamptz }}-'2 week'::interval, {{ .StartOfWeek | timestamptz }}-'1 week'::interval)))::interval)/extract(epoch from '1 week'::interval) as uptime
        from sessions s
        where s.uptime && tstzrange({{ .StartOfWeek | timestamptz }}-'2 week'::interval, {{ .StartOfWeek | timestamptz }}-'1 week'::interval)
        group by peer_id
      )
      select
        sum(case when uptime >= 0.8 then 1 else 0 end) as online,
        sum(case when uptime >= 0.4 and uptime < 0.8 then 1 else 0 end) as mostlyonline,
        sum(case when uptime >= 0.1 and uptime < 0.4 then 1 else 0 end) as mostlyoffline,
        sum(case when uptime < 0.1 then 1 else 0 end) + (
          with cte as (
            select v.peer_id
            from visits v
            where v.visit_started_at >= {{ .StartOfWeek | timestamptz }} - '2 week'::interval
              and v.visit_started_at < {{ .StartOfWeek | timestamptz }} - '1 week'::interval
              and v.type = 'crawl'
            group by v.peer_id
            having bool_and(v.connect_error IS not null)
          ) select count(distinct peer_id) from cte
        ) as offline
      from u;

scalars:
  - type: "number"
    name: "Online"
    dataset: "current"
    value: "online"
    deltaDataset: "previous"
    deltaValue: "online"
    deltaType: "relative"
    increaseColor: deltabetter
    decreaseColor: deltaworse
  - type: "number"
    name: "Mostly Online"
    dataset: "current"
    value: "mostlyonline"
    deltaDataset: "previous"
    deltaValue: "mostlyonline"
    deltaType: "relative"
    increaseColor: deltabetter
    decreaseColor: deltaworse
  - type: "number"
    name: "Mostly Offline"
    dataset: "current"
    value: "mostlyoffline"
    deltaDataset: "previous"
    deltaValue: "mostlyoffline"
    deltaType: "relative"
    increaseColor: deltaworse
    decreaseColor: deltabetter
  - type: "number"
    name: "Offline"
    dataset: "current"
    value: "offline"
    deltaDataset: "previous"
    deltaValue: "offline"
    deltaType: "relative"
    increaseColor: deltaworse
    decreaseColor: deltabetter


layout:
  title:
    text: "Data: week ending {{ .EndOfPreviousWeek | simpledate }}. Source: Nebula."
    font:
      size: 10
    x: 0.99
    xanchor: "right"
    y: 0.01
    yanchor: "bottom"
